----- Class Main -----

ATTRIBUTES:
    - String[][] maze, the maze grid as a 2D array
    - Node startingRoom, the starting room node in the maze

METHODS:
    main() - handles user input for the maze file, imports the maze, searches for a path, and displays the results.
        1. Prompt the user to enter the file name containing the maze
        2. Read the maze from the file using the importMaze method
        3. Display the original, un-searched maze grid to the user and locate the starting room
        4. Search for a path to complete the maze using the searchMaze method
        5. Display the result indicating whether a path exists or not
        6. Display the searched maze grid to the user

    searchMaze(Node current) - searches for a path to complete the maze starting from the current room.
        1. Create array containing the indexes of adjacent squares to the current room
        2. Iterate over each adjacent square:
            a. If the adjacent square is an unexplored room, mark it as explored and create a new node for it
            b. Recursively call searchMaze with the new node
            c. If a path to the end of the maze is found, return true
        3. If no path is found from the current room, return false

    importMaze(String fileName) - reads the maze from a file and initializes the maze array with the maze's dimensions and content.
        1. Read the maze file line by line
        2. Extract maze dimensions from the first line and initialize the maze array accordingly
        3. Populate each square in the maze array based on the characters in the subsequent lines


----- Class Node -----

ATTRIBUTES:
    - int x, represents the x-coordinate of a room
    - int y, represents the y-coordinate of a room
    - List<Node> paths, a linked list containing all rooms searched and any path diversions

METHODS:
    Node(int x, int y) - initializes a node with the given x and y coordinates.
        1. Set the x-coordinate of the node.
        2. Set the y-coordinate of the node.
        3. Initialize an empty list to store adjacent nodes.

    getX() - returns the x-coordinate

    getY() - returns the y-coordinate

    getPaths() - returns the list of adjacent nodes from the current node.
